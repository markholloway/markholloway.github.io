<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Mark Holloway</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2019-01-22T17:27:52-06:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Use BASH to send texts with Twilio</title>
   <link href="http://localhost:4000/2018/12/22/twilio-sms-curl/"/>
   <updated>2018-12-22T00:00:00-06:00</updated>
   <id>http://localhost:4000/2018/12/22/twilio-sms-curl</id>
   <content type="html">&lt;p&gt;This is a short note on how to send SMS messages using &lt;code class=&quot;highlighter-rouge&quot;&gt;BASH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; in macOS and Linux. Windows users can use &lt;a href=&quot;https://gitforwindows.org&quot;&gt;GIT BASH&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;working-with-curl&quot;&gt;Working with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Copy the script to a text editor for modification.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;https://api.twilio.com/2010-04-01/Accounts/{AccountSID}/Messages&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;From=+1xxxxxxxxxx&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Body=I'm using curl to send a text from a Twilio number.&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;To=+1xxxxxxxxxx&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{AccountSID}:{AuthToken}&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Replace {AccountSID} in the &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt; portion with a valid SID. Repalce the &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; credentials {AccountSID:AuthToken} with the matching SID and Token.  They must be separated by &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; or verification will fail. Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;From=+1xxxxxxxxxx&lt;/code&gt; to with the Twilio number and replace &lt;code class=&quot;highlighter-rouge&quot;&gt;To=+1xxxxxxxxxx&lt;/code&gt; with the destination number.&lt;/p&gt;

&lt;p&gt;Adding &lt;code class=&quot;highlighter-rouge&quot;&gt;sms-test.json&lt;/code&gt; at the end of the script will allow the response to be easily read in a &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; viewer. Otherwise the response is squashed together in the BASH terminal and difficult to read.&lt;/p&gt;

&lt;p&gt;Below is the final format of the script to paste and send a text message.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;https://api.twilio.com/2010-04-01/Accounts/1a2b3c4d5e6f7g8h9i0j/Messages&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;From=+15552392613&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Body=I'm using curl to send a text from a Twilio number.&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;To=+15554345978&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1a2b3c4d5e6f7g8h9i0j:l0k9j8h7g6f5d4s3a2q1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; sms-test.json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC “load-limit” Command Option</title>
   <link href="http://localhost:4000/2012/11/19/acme-packet-load-limit/"/>
   <updated>2012-11-19T00:00:00-06:00</updated>
   <id>http://localhost:4000/2012/11/19/acme-packet-load-limit</id>
   <content type="html">&lt;p&gt;The Acme Packet SBC has an optional parameter that may be added under &lt;code class=&quot;highlighter-rouge&quot;&gt;sip-config&lt;/code&gt; that allows the SBC to gracefully handle traffic in the event the SBC’s main processor reaches a certain threshold.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There are several reasons as to why this may occur, but at the most basic level it’s a good idea to draw a line in the sand and define at what point to you want to start gracefully &lt;code class=&quot;highlighter-rouge&quot;&gt;rejecting calls&lt;/code&gt; if the CPU reaches a certain threshold. Every SIP appliance should have this option but unfortunately most do not.&lt;/p&gt;

&lt;p&gt;What separates the Acme Packet SBC from others is that when this threshold is reached the SBC will reply with a &lt;code class=&quot;highlighter-rouge&quot;&gt;SIP 503 Service Unavailable&lt;/code&gt; message which tells the originator to try an alternate destination.  In most other SIP appliances once the CPU threshold reaches a certain point the traffic is disrupted by means of calls dropping, loss of RTP (if media is flowing through), or registrations becoming corrupted.&lt;/p&gt;

&lt;p&gt;It is worth mentioning that the purpose of setting the load-limit is to avoid an unforeseen event that would cause any network device to experience excessive utilization and effect production traffic.  This is not a replacement for proper &lt;code class=&quot;highlighter-rouge&quot;&gt;SROP&lt;/code&gt; (SIP Registration Overload Protection) and DDoS (Distributed Denial of Service) configuration on the SBC.  With the proper SROP and DDoS settings you are ensuring the Acme Packet SBC is running optimally and protecting your network while gracefully shedding unwanted or dangerous traffic.&lt;/p&gt;

&lt;p&gt;The following is a shortened output of my sip-config with no options applied.  Adding the load-limit option is a matter of entering the following command.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
sip-config
    state                   enabled
    operation-mode          dialog
    dialog-transparency     disabled
    home-realm-id           Core
    egress-realm-id         
...
    options

PHOENIX(sip-config)# options load-limit=&amp;lt;cpu-percentage&amp;gt;
PHOENIX(sip-config)# done

sip-config
    state                   enabled
    operation-mode          dialog
    dialog-transparency     disabled
    home-realm-id           Core
    egress-realm-id
...
    options                 load-limit=90

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;At this point the Acme Packet SBC will gracefully reject incoming calls if the CPU reaches or &lt;code class=&quot;highlighter-rouge&quot;&gt;exceeds 90%&lt;/code&gt;. Of course this value may be set higher or lower.  More than likely more options will be applied in your &lt;code class=&quot;highlighter-rouge&quot;&gt;sip-config&lt;/code&gt;. If you follow the same process to add another option it will overwrite the option that already exists.  Prepending the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; symbol in front of the option will add it in addition to any existing options.&lt;/p&gt;

&lt;p&gt;In this example the &lt;code class=&quot;highlighter-rouge&quot;&gt;load-limit&lt;/code&gt; is the first configured option. In addition, the &lt;code class=&quot;highlighter-rouge&quot;&gt;max-udp-length&lt;/code&gt; is going to be set to 0 which allows the SBC to fragment UDP packets. Otherwise the maximum size a UDP packet may be is 1500 bytes before having to use SIP TCP.  Setting this in &lt;code class=&quot;highlighter-rouge&quot;&gt;sip-config&lt;/code&gt; applies globally on the SBC but it is possible to configure this on a per sip-interface basis if desired.  The last option is reg-cache-mode=none which tells the SBC to retain the userinfo (post NAT) in the Contact. In most environments (such as Broadsoft BroadWorks) none is the value to use. This is also required when configuring SIP Registration Overload Protection (this will be a separate blog post in the near future.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
PHOENIX(sip-config)# options +reg-cache-mode=none
PHOENIX(sip-config)# options +max-udp-length=0
PHOENIX(sip-config)# done

sip-config
    state                   enabled
    operation-mode          dialog
    dialog-transparency     disabled
    home-realm-id           Core
    egress-realm-id
...
    options                 load-limit=90 reg-cache-mode=none
                            max-udp-length=0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Based on applying the load-limit to the sip-config this provides one additional line of defense that safeguards your platform from suffering a total outage. There have been many occasions noted in the past where other platforms do not employee this method and the end result is a complete and total network outage.  Once the outage starts it becomes very difficult to recover because endpoints will begin retransmitting. Using this feature in combination with alarm-thresholds plus the appropriate SROP and DDoS settings, there is always awareness of what’s occurring on the network while at the same time gracefully handling any overflow.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC “packet-trace” Command (capturing SIP signaling)</title>
   <link href="http://localhost:4000/2012/06/19/acme-packet-packet-trace/"/>
   <updated>2012-06-19T00:00:00-05:00</updated>
   <id>http://localhost:4000/2012/06/19/acme-packet-packet-trace</id>
   <content type="html">&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;packet-trace&lt;/code&gt; ACLI command allows the Acme Packet SBC (Session Director) to capture SIP signaling communication between two endpoints and send the capture to external server such as Wireshark.The SBC uses the network interfaces (ie. media interfaces) to send the capture.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The first step is to configure a capture receiver.  This tells the SBC what interface is used for the mirrored packets and the target IP of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt; server. The network-interface is the SBC’s &lt;code class=&quot;highlighter-rouge&quot;&gt;network-interface&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sub-port ID&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
capture-receiver
    state                   enabled
    ip-address              10.12.135.150
    network-interface       m00:0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next step is to identify what &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ports&lt;/code&gt; the SBC should listen to in order to send the packets to Wireshark. If no ports are identified then the SBC listens on all ports.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
PHOEN?IX# packet-trace start Access:0 217.154.63.10 5060 5060 
Trace start for 217.154.63.10

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though it is not required to specify the local and remote TCP/UDP ports  it’s always a good idea to be as specific as possible when defining captures so only the required data is captured. At this point any calls coming into the SBC that involve the &lt;code class=&quot;highlighter-rouge&quot;&gt;IP 217.154.63.10&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;UDP&lt;/code&gt; port &lt;code class=&quot;highlighter-rouge&quot;&gt;5060&lt;/code&gt; are going to trigger the capture and packets will be sent to Wireshark. Sixteen concurrent traces can be running at once.&lt;/p&gt;

&lt;p&gt;One thing to note is the capture is sent to Wireshark using RFC 2003 (IP to IP encapsulation) as opposed to relaying SIP on port 5060. This means Wireshark needs to be configured to listen for RFC 2003 packets and then it will decode them. Use the ip.src filter to display only the encapsulated SIP packets&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC Register Grace Timer</title>
   <link href="http://localhost:4000/2012/01/24/acme-packet-sbc-register-grace-timer/"/>
   <updated>2012-01-24T00:00:00-06:00</updated>
   <id>http://localhost:4000/2012/01/24/acme-packet-sbc-register-grace-timer</id>
   <content type="html">&lt;p&gt;The Acme Packet SBC contains an optional parameter that may be added to the configuration which helps avoid a SIP avalanche from occurring.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;One instance of a SIP avalanche is when a very large number of SIP endpoints consecutively send SIP registrations to an SBC which then forwards them to a SIP registrar. This can be dangerous for both the registrar and the SBC depending on how many endpoints are attempting to register. Assuming &lt;code class=&quot;highlighter-rouge&quot;&gt;DDoS&lt;/code&gt; is applied to the SBC configuration, it will protect itself as well as the SIP registrar from being negatively impacted by the avalanche.&lt;/p&gt;

&lt;p&gt;The following scenario shows how endpoints typically behave when they NAT through a firewall. Normally the firewall will NAT the layer 3 IP address but the layer 7 (SIP) address remains the private address. Upon receiving the NAT’d registration the SBC forwards the register message to a SIP register platform and after an exchange of a few messages between the registrar and endpoint a &lt;code class=&quot;highlighter-rouge&quot;&gt;200OK&lt;/code&gt; is sent from the registrar back to the endpoint with a register expires of 3600 seconds (default for Broadworks). The SBC knows the SIP endpoint is behind NAT and changes this timer from 3600 to something shorter (60 seconds is common).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-grace01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Envision a scenario where the Internet is experiencing a route flap which is causing endpoints to lose connectivity to the SBC. If the endpoints should register every 60 seconds and they fail to do so, the SBC will delete them from the registration cache. If perhaps five minutes later the Internet is restored and the endpoints are able to communicate with the SBC again they would have to complete the entire registration process again. This would trigger a &lt;code class=&quot;highlighter-rouge&quot;&gt;SIP avalanche&lt;/code&gt; that may negatively impact the core SIP network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-grace02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By implementing the option &lt;code class=&quot;highlighter-rouge&quot;&gt;register-grace-timer&lt;/code&gt; parameter to the global SIP config and specifying a number of seconds,the SBC will retain the cached entries rather than let them expire even if the endpoint registration isn’t received. Once the endpoints come back after the Internet outage is resolved and they send a SIP registration to the SBC, the SBC will not forward this to the core because the previous registration remains valid in the SBC cache. This prevents the SBC from having to go through the entire registration process thus reducing the overhead involved on both the SBC and SIP registrar.&lt;/p&gt;

&lt;p&gt;In this example the timer is set to 300 seconds. If endpoints are supposed to send their registration every 60 seconds but the SBC is not receiving them, it will retain the reg cache entry for another five minutes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-grace03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The diagram above demonstrates that even though the Internet is restored and endpoint registrations are reaching the SBC, there is no need for the SBC to forward these registrations to the SIP registrar since the &lt;code class=&quot;highlighter-rouge&quot;&gt;reg-cache&lt;/code&gt; was retained during the outage. This prevents CPU cycles from being unnecessarily used on both the SBC and SIP registrar.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
sip-config
    state               enabled
    operations-mode     dialog
    dialog-transparency enabled
    home-realm-id       Core
...
    options             cache-challenges
                        max-register-forward=500
                        max-register-refresh=600
                        max-udp-length=0
                        reg-cache-mode=from
                        reg-overload-protect
                        register-grace-timer=300
                        reject-register-refresh
                        set-inv-exp-at-100-resp

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-grace04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The diagram above demonstrates that even though the Internet is restored and endpoint registrations are reaching the SBC, there is no need for the SBC to forward these registrations to the SIP registrar since the reg-cache was retained during the outage. This prevents CPU cycles from being unnecessarily used on both the SBC and SIP registrar.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC Media Aggregation</title>
   <link href="http://localhost:4000/2011/11/09/acme-packet-sbc-media-aggregation/"/>
   <updated>2011-11-09T00:00:00-06:00</updated>
   <id>http://localhost:4000/2011/11/09/acme-packet-sbc-media-aggregation</id>
   <content type="html">&lt;p&gt;The Acme Packet 3800 and 4500 series Session Border Controllers come with an NIU (Network Interface Unit) that includes four Gigabit ports.  In rare cases one may need to support &lt;code class=&quot;highlighter-rouge&quot;&gt;Media Aggregation&lt;/code&gt; where two of the Gigabit interfaces need to be look like they are “bonded” to accommodate a large number of calls (with media anchored).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For example, a wholesale SIP Peering Service Provider may need to handle upwards of 16,000 concurrent calls on one single Realm on the SBC.  If  calls are using the G.711 codec this would require 1.5GB of bandwidth.&lt;/p&gt;

&lt;p&gt;The process used to support Media Aggregation is to assign the same Realm name to two different &lt;code class=&quot;highlighter-rouge&quot;&gt;Steering Pools&lt;/code&gt;.  For example, on the realm named &lt;code class=&quot;highlighter-rouge&quot;&gt;Access&lt;/code&gt; it would have more than one steering pool which would reference two different network-interfaces.  The same is true for the Core.  In the following example NIU ports 0 and 1 are used for Access (public facing) and 2 and 3 are used for Core (private).  Note the NIU is considered slot 0 and the ports are 0, 1, 2, 3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-media-agg01.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/blog/assets/apkt/apkt-media-agg02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to verify you have your &lt;code class=&quot;highlighter-rouge&quot;&gt;Access&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Core&lt;/code&gt; realms configured.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-media-agg03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final step is to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;Steering Pools&lt;/code&gt; and define the &lt;code class=&quot;highlighter-rouge&quot;&gt;network-interfaces&lt;/code&gt; for each.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-media-agg04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point the SBC will utilize two ports assigned to Access and two ports assigned to Core to support media thus providing Media Aggregation. SIP signaling continues to only traverse on the sip-interfaces assigned to the Access and Core realms (s0p0 and s0p2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-media-agg05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point the Acme Packet SBC is fully prepared to handle traffic that exceeds 1GB on a single Realm.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC sag-lookup-on-redirect</title>
   <link href="http://localhost:4000/2011/10/27/acme-packet-sbc-sag-lookup-on-redirect/"/>
   <updated>2011-10-27T00:00:00-05:00</updated>
   <id>http://localhost:4000/2011/10/27/acme-packet-sbc-sag-lookup-on-redirect</id>
   <content type="html">&lt;p&gt;In most cases a SIP Redirect Server simply responds to a SIP Invite with a &lt;code class=&quot;highlighter-rouge&quot;&gt;302 Moved Temp&lt;/code&gt; message and provides multiple contacts in the Contact Header.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;When this occurs, the device receiving the 302 Moved Temp message (such as an Acme Packet SBC) will attempt to contact (ie. send a SIP Invite) the first address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Contact Header&lt;/code&gt;.  If that fails, it will send a SIP Invite to the next address, and if that fails, the process will continue until there are no more addresses remaining.  Although this provides some form of redundancy it is not necessarily the best approach. Utilizing call flow this way means there is no control over how calls could potentially be load balanced if desired (or required).  Also, if one of the devices in the Contact Header is offline, there is no knowledge of this by the SBC and it will continue to send SIP Invites regardless and wait for the timers to expire. Definitely a less than desirable behavior.  The last item to note is that if you need to send SIP Invites to a potentially large group of servers (20 or more) there is a chance the Contact Header will become so large this is going to cause the SIP message to become fragmented.  All of these pitfalls may be easily avoided.&lt;/p&gt;

&lt;p&gt;The Acme Packet SBC has a feature called &lt;code class=&quot;highlighter-rouge&quot;&gt;sag-lookup-on-redirect&lt;/code&gt;. Simply put, the Redirect Server provides just one address in the Contact Header and the SBC will match that to a Session Agent Group in its configuration.  The result is calls may be load balanced (Hunt, Round Robin, Least Utilized, Least Busy, Proportional Distribution) and the SBC has the benefit of knowing when a target address (Session Agent) is alive and healthy which means it is in-service, or if the target is offline or unhealthy and therefore the SBC demotes it to an out-of-service state.  When a Session Agent is in an out-of-service state the SBC will not to send SIP Invites to that particular destination.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-sag-redirect.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The feature sag-lookup-on-redirect is enabled through sip-config.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
PHOENIX# configure terminal
PHOENIX(configure)# session-router
PHOENIX(session-router)# sip-config
PHOENIX(sip-config)# sag-lookup-on-redirect enabled
PHOENIX(sip-config)# done

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order for the SBC to pro-actively determine if a Session Agent is in-service or out-of-service, configure OPTIONS ping for each Session Agent.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
session-agent
…
ping-method                    OPTIONS;hops=0
ping-interval                  60
ping-send-mode                 keep-alive

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To view what Session Agents are in-service execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
PHOENIX# show sipd agents

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, when the SBC receives a 302 Moved Temp message it will load balance based on the chosen scheme.  If any Session Agents are out of service the SBC will not attempt to send a SIP Invite.  The SBC waits until three successful OPTIONS pings are received before declaring an agent in service again.  This is great as it helps prevent an endpoint from flapping on the network.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC Answer Seizure Ratio Based Routing</title>
   <link href="http://localhost:4000/2011/07/25/acme-packet-sbc-answer-seizure-ratio-routing/"/>
   <updated>2011-07-25T00:00:00-05:00</updated>
   <id>http://localhost:4000/2011/07/25/acme-packet-sbc-answer-seizure-ratio-routing</id>
   <content type="html">&lt;p&gt;Answer to Seizure Ratio &lt;code class=&quot;highlighter-rouge&quot;&gt;(ASR)&lt;/code&gt; is a term used in Telecommunications and helps determine when new call setup attempt should be routed to an alternate destination. The definition of ASR is the number of successfully answered calls divided by the total number of calls attempted &lt;code class=&quot;highlighter-rouge&quot;&gt;(seizures)&lt;/code&gt; multiplied by 100. The formula is (Answer / Seizure) * 100 = AnswerSeizureRatio.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Normally when an SBC initiates a SIP Invite to a peer and receives a &lt;code class=&quot;highlighter-rouge&quot;&gt;SIP 503 Service Unavailable&lt;/code&gt; message in return the SBC will attempt another call setup to a secondary destination (Session Agent) automatically.  However, using an example such as busy signals, they not considered “failures” by a SIP device, yet there could be an upstream outage somewhere causing an unexplained amount of SIP 600 Busy messages being returned that is starving the Telecom network from completing calls. Since the Acme Packet SBC has the ability to route based on a configured ASR threshold, call may easily be routed to another destination if the configured ASR value falls below a specified threshold. Nice!&lt;/p&gt;

&lt;p&gt;The place to &lt;code class=&quot;highlighter-rouge&quot;&gt;configure ASR&lt;/code&gt; is within a &lt;code class=&quot;highlighter-rouge&quot;&gt;Session Agent&lt;/code&gt;.  By defining a minimum (acceptable) ASR value, the SBC computes ASR as it makes routing decisions.  Using the formula first mentioned above, the SBC is calculating the number of successfully answered calls on a Session Agent and dividing by the total number of calls attempted. If the ASR constraints are exceeded, the Session Agent goes out of service for a configurable period of time and all traffic is routed to a secondary Session Agent (via a Local Policy which has the same Next-Hop but with a higher cost).&lt;/p&gt;

&lt;p&gt;The two ASR parameters within a Session Agent are &lt;code class=&quot;highlighter-rouge&quot;&gt;minimum seizure&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;minimum ASR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Minimum Seizure determines if the Session Agent is within it’s normal constraints. For example, if 5 call attempts (seizures) have been made to a Session Agent and none have been answered, and the min seizures is set to 5, then on the 6th failed attempt the Session Agent will be marked as having exceeded its constraints and will be marked out of service.&lt;/p&gt;

&lt;p&gt;Minimum ASR is considered when making routing decisions. If some or all of the calls to the Session Agent have been answered, the min ASR value is considered to make the routing decision. For example, if you set the Minimum ASR to 50% and the Session Agent’s ASR for that window falls below 50%, the Session Agent is marked as having exceeded its constraints and calls will not be routed to it until the time-to-resume has elapsed.&lt;/p&gt;

&lt;p&gt;The time-to-resume element tells the SBC how long (in seconds) a &lt;code class=&quot;highlighter-rouge&quot;&gt;Session Agent&lt;/code&gt; should be considered out of service once constraints have been exceeded.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
session-agent
...
    hostname        sip.markholloway.com
    min-seizures    5
    min-asr         50
    time-to-resume  300

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Possible values for min-seizures range from 1 to 999999999. The default value is 5.&lt;/p&gt;

&lt;p&gt;Possible percentage values for min-asr range from 0 to 100. The default is set to 0.&lt;/p&gt;

&lt;p&gt;Networks where two or more egress paths exist on the VoIP network should consider using ASR based routing to provide the greatest level of network availability during a potential network congestion-outage related issue.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>QoS Routing on the Acme Packet SBC</title>
   <link href="http://localhost:4000/2011/05/19/acme-packet-sbc-qos-routing/"/>
   <updated>2011-05-19T00:00:00-05:00</updated>
   <id>http://localhost:4000/2011/05/19/acme-packet-sbc-qos-routing</id>
   <content type="html">&lt;p&gt;QoS based Routing is a feature of the Acme Packet SBC (Session Director) that pro-actively observes and measures RTP quality on a given network path (realm) by using R-Factor (QoS measurement) to determine if quality is acceptable. If the R-Factor falls below a certain threshold then new calls are re-routed on another network path using a different realm. This works for both inbound and outbound calls.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The example diagram show calls being received inbound from an ITSP. It is common for customers to deploy multiple SBC’s in different physical locations for geographic redundancy. Most people think of redundancy and failover occurring when the network is completely down or unreachable, but another factor to consider is a network condition where route flapping, DoS attacks on a router, or bad cabling play a role in an outage and there is intermittent network connectivity. In many cases having intermittent connectivity is actually worse than the network being completely unreachable. For example, if a SIP Invite is successfully setup, yet within seconds the network experiences flapping, the RTP traffic will be lost momentarily. This is where QoS based Routing can save the day.&lt;/p&gt;

&lt;p&gt;This  diagram displays a primary and secondary SBC with two SIP paths from an ITSP to the customer’s network. In this case there is no service disruption occurring.&lt;/p&gt;

&lt;p&gt;In order to utilize QoS based Routing on the SBC it requires the qos-enable value to be set to enabled under media-manager/realm-config. QoS based Routing uses R-Factor to measure quality on a per-realm basis to either cut back the traffic allowed through a realm or alternatively shut down all traffic on that realm.&lt;/p&gt;

&lt;p&gt;When configuring QoS constraints per realm there are two categories: major and critical. The constraints set in the major category rejects a certain percentage of calls with a SIP 503 Service Unavailable message. The percentage value is configurable by the user using the call-load-reduction context entry with a value between 0 and 100 (0 represents no call reduction and 100 represents all calls rejected). Calls originating on the customer’s network towards the ITSP will automatically use another realm if there are other routes configured on the customer’s SBC, otherwise calls will be rejected if there are no alternative routes. The critical behavior functions very similar to major, however the user may specify when calls should resume on the realm based on a time-to-resume value which tells the SBC to wait until the R-Factor has achieved acceptable performance for a specific period of time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Testing SIP Header Manipulation Rules from the Acme Packet (ACLI) Command Line</title>
   <link href="http://localhost:4000/2011/05/09/acme-packet-sbc-testing-sip-hmr/"/>
   <updated>2011-05-09T00:00:00-05:00</updated>
   <id>http://localhost:4000/2011/05/09/acme-packet-sbc-testing-sip-hmr</id>
   <content type="html">&lt;p&gt;SIP Header Manipulation provides the flexibility to add, remove, or modify any attribute in a SIP message on the Acme Packet SBC. The most common reason for doing this is to fix an incompatibility problem between two SIP endpoints. This could range from anything such as Softswitch/PSTN incompatibility or an issue between two different IP PBX platforms in a multi-site Enterprise where calls between them fail due to issues in the SIP messaging.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In the past there was no straight forward way to test SIP Header Manipulation Rules other than performing save/activate and manually placing test calls to see if the HMR worked.&lt;/p&gt;

&lt;p&gt;The example below is a case where an HMR needed to be written to route calls based on the Charge Number in the SIP Invite rather than routing on the Request-URI, TO, or FROM numbers. Because BroadWorks R14 uses a proprietary charge number header it is required to have one rule that looks at the number in the charge number header and stores that value using a store-action, then through the use of a second rule pastes the number as cn=4804563000 into the Request-URI then use a local-policy to route the call based on the cn= value.&lt;/p&gt;

&lt;p&gt;The original SIP Invite from BroadWorks looks like this.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
INVITE sip:+18005551212@sip.markholloway.com:5060;user=phone SIP/2.0
From:”John Smith”&amp;lt;sip:4804814001@voip.markholloway.com;user=phone&amp;gt;;tag=1121176714-1301523646656-
To:&amp;lt;sip:+18005551212@sip.markholloway.com:5060;user=phone&amp;gt;
Call-ID:BW1520466563003111177145372@10.12.135.140
CSeq:74277985 INVITE
Contact:&amp;lt;sip:10.12.135.100:5060&amp;gt;
Privacy:none
Allow:ACK,BYE,CANCEL,INFO,INVITE,OPTIONS,PRACK,REFER,NOTIFY
Accept:multipart/mixed,application/media_control+xml,application/sdp
Charge:&amp;lt;tel:4804563000&amp;gt;;noa=clgp-ani-natl-num
Supported:
Max-Forwards:10
Content-Type:application/sdp
Content-Length:255

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The goal is to Route based on the Charge Number not the Request URI, To, or From numbers.  An HMR on the Session Director must be created to extract 4804563000 from the Charge Number header and insert it in the Request URI as a cn=4804563000.&lt;/p&gt;

&lt;p&gt;Here is the HMR for copying the number from the Charge Number header and inserting it as a cn= parameter in the Request URI. Note this is one sip-manipulation that contains two rules.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/test-hmr-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The HMR may be tested directly within the ACLI by pasting in ASCII text that contains the original message of which the SD will manipulate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/test-hmr-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is set debugging enabled (from within test-sip-manipulation), show the sip-manipulation you are about to test (always good for verification), and then execute the test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/test-hmr-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SD shows the debug output of the original SIP Invite that was pasted in ASCII.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/test-hmr-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SD now presents the newly manipulated SIP Invite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/test-hmr-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC and Configuring Codec Policies for SIP Call Flows</title>
   <link href="http://localhost:4000/2011/02/20/acme-packet-sbc-code-policy/"/>
   <updated>2011-02-20T00:00:00-06:00</updated>
   <id>http://localhost:4000/2011/02/20/acme-packet-sbc-code-policy</id>
   <content type="html">&lt;p&gt;The Acme Packet Session Director (often referred to as a Session Border Controller) has the flexibility of re-ordering or completely removing certain codecs from SDP (Session Description Protocol) before passing a SIP Invite to the destination SIP endpoint.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Codec re-ordering or stripping is useful in cases where the originating device may be sending a particular codec that is not supported (or preferred) by the far.  For example, a SIP peering destination may only allow certain codecs to be contained in SIP Invites originating from your network.  If a device is sending G722, G711, G726, and G729 but the far end explicitly states only G722 and G711 are permitted, a policy must exist somewhere in the network that complies with the requirements of the far end.  Some SIP endpoints provide control over which codecs are permitted in SDP, but this is not always the case and therefore the Acme Session Director is able to provide global enforcement over all endpoints to ensure they comply.  Using the SD also drastically simplifies SIP endpoint management by avoiding tedious configuration of individual configurations for various devices.&lt;/p&gt;

&lt;p&gt;The Session Director has the ability to perform codec policy enforcement on an incoming policy or an outgoing policy. The incoming policy is great if you want to achieve the same result for every incoming call regardless of what realm the call will egress.  Configuring on the egress allows customization where perhaps one realm may order the codec list one way while another realm orders the codec list another way as the call leaves the Session Director depending on which destination the SIP Invite is sent to.&lt;/p&gt;

&lt;p&gt;The diagram illustrates the scenario above where an endpoint is sending more codec than what is permitted by the far end. The Acme Session Director has the ability to re-write the SDP before sending the SIP Invite to the far end.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/apkt/apkt-codec-policy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, start by going into configuration mode and enter the codec-policy configuration.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
lab-sd4500# conf t
lab-sd4500(configure)# media-manager
lab-sd4500(media-manager)# codec-policy
lab-sd4500(codec-policy)# &amp;lt;policy name&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This very basic example allows all codecs in the SDP to pass through. The * symbol represents a wildcard. This is effectively the same as having no codec policy.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
lab-sd4500(codec-policy)# allow-codecs *

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next example allows all codecs except for G729 to pass through.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
lab-sd4500(codec-policy)# allow-codecs * G729:no

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next example removes all codecs from the SDP.  If the far end device is in compliance with RFC 3264 (offer/answer with SDP) it will supply a new SDP in response to the SIP Invite.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
lab-sd4500(codec-policy)# allow-codecs * audio:no

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next example demonstrates a SIP endpoint that originates a SIP Invite which contains G711 and G729, but only G729 should be passed to the far end. However, if the originating device had sent a SIP Invite that contains G711 but does not contain G729 then G711 is permitted to be included in the SDP to the far end SIP endpoint.  Essentially, the word force is stating that if G729 is present in the original Invite, regardless of whether G711 is present, then only send G729 to the far end. If G729 is not present but G711 is present, go ahead and send G711.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
lab-sd4500(codec-policy)# allow PCMU G729:force

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next is an example of a codec-policy which needs to be associated with a Session Agent (ie. target SIP endpoint such as a PSTN SIP Peering Provider, also referred to as an ITSP) or a Realm. The purpose of this policy is to strip G726 from SDP as well as strip any video offering. The policy is given a name which references its actual purpose. This is something I tend to do quite frequently on the SD as the configuration can get quite large and this helps keep track of policies. The end result is that G711 will be the preferred codec offered in SDP to the ITSP.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
codec-policy
    name s          trip-726-video
    allow-codecs    g726:no pcmu video:no
    order-codecs    pcmu

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After creating the codec-policy above we may associate it with a Session Agent so it is enforced.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
lab-sd4500# configure terminal
lab-sd4500(configure)# session-router
lab-sd4500(session-router)# session-agent
lab-sd4500(session-agent)# select

1. ITSP A
2. ITSP B
3. ITSP C

&amp;gt; 3

lab-sd4500(session-agent)# codec-policy strip-726-video
lab-sd4500(session-agent)# done
lab-sd4500(session-agent)# exit
lab-sd4500(session-router)# exit
lab-sd4500(configure)# exit
lab-sd4500# save-config
lab-sd4500# verify-config
No errors found
lab-sd4500# activate-config

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Associating the policy with a Session Agent means all calls which traverse through that particular Session Agent will have the codec-policy enforced.  If the policy should be Realm specific rather than Session Agent specific then perform the following instead.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
lab-sd4500# configure terminal
lab-sd4500(configure)# media-manager
lab-sd4500(media-manager)# realm-config
lab-sd4500(realm-config)# select

1. Access
2. Core
3. Peering ITSP Core

&amp;gt; 3

lab-sd4500(realm-config)# codec-manip-in-realm strip-726-video
lab-sd4500(realm-config)# done
lab-sd4500(realm-config)# exit
lab-sd4500(media-manager)# exit
lab-sd4500(configure)# exit
lab-sd4500# save-config
lab-sd4500# verify-config
No errors found
lab-sd4500# activate-config

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The examples provided only scratch the surface and are a basic introduction to the topic of codec policies. All of this and more may be found in the ACLI documentation. The Session Director is an incredibly flexible platform and I continuously find it fascinating how granular one can get when it comes to controlling their voice network.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC and Useful ACLI Commands</title>
   <link href="http://localhost:4000/2011/01/21/acme-packet-sbc-acli-useful-commands/"/>
   <updated>2011-01-21T00:00:00-06:00</updated>
   <id>http://localhost:4000/2011/01/21/acme-packet-sbc-acli-useful-commands</id>
   <content type="html">&lt;p&gt;Recently someone asked what some of the most useful commands are on the Session Director after performing a fresh install/configuration of an SD.  The following was provided by one of the Acme Packet Systems Engineers in response to the inquiry.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show sipd sessions all&lt;/code&gt; – Will display all of the active SIP sessions that are currently traversing the SBC, including the To, From, Call-ID&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show sipd invite&lt;/code&gt; – Will display a chart of all recent SIP requests and responses&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;notify sipd siplog&lt;/code&gt; – Enables the sipmsg.log which includes all SIP traffic traversing the SBC..only to be used in pre-production/trial environment&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show logfile sipmsg.log&lt;/code&gt; – Will output the contents of the sipmsg.log without having to FTP this file off the SBC&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;notify sipd rotate-logs&lt;/code&gt; – Will clear all sipd log buffers&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;display-alarms&lt;/code&gt; – Alarm log output&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show running-config&lt;/code&gt; – Outputs all of the configuration elements&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show support-info&lt;/code&gt; -  Outputs all of the system level info, including hardware specifics, licensing info, etc&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show health&lt;/code&gt; – For a standalone system will give a good overview of failover history&lt;/p&gt;

&lt;p&gt;I would also like to add the following which I think are useful in some cases.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show prom-info all&lt;/code&gt; – Displays serial number, hardware revision, manufacturing date&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;notify sipd debug&lt;/code&gt; – Enables a subset of the full logging behavior of sipd on the Session Director&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;notify sip nodebug&lt;/code&gt; - Turn off debug&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log-level sipd debug&lt;/code&gt; – Enable full debug logs&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log-level sipd notice&lt;/code&gt; – Turn off full debug&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show version&lt;/code&gt; - Displays SBC current software version&lt;/p&gt;

&lt;p&gt;The log file generated in both cases is log.sipd&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Acme Packet SBC SIP Header Manipulation Rules</title>
   <link href="http://localhost:4000/2010/04/23/apkt-sip-header-manipulation/"/>
   <updated>2010-04-23T00:00:00-05:00</updated>
   <id>http://localhost:4000/2010/04/23/apkt-sip-header-manipulation</id>
   <content type="html">&lt;p&gt;This is an example of how to modify a SIP header with an Acme Packet Session Border Controller (SBC).  An SBC is a device most commonly used by Service Providers and Enterprises to provide topology hiding between a SIP platform and an untrusted SIP network.  In the most simplistic terms think of it as a Cisco PIX or ASA but explicitly dedicated to Voice over IP (SIP, H.323, MGCP).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This HMR provides the ability to populate Call Detail Record VSA’s with info from a SIP Header Manipulation Rule. It lets the HMR copy anything from the SIP message into one of 30 CDR fields of your choosing and works for RADIUS and CSV file CDR formats using VSA number range of 200-229 reserved for customer-specific requirements.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
header-rule

    name                storeDiversion
    header-name         Diversion
    action              store
    comparison-type     pattern-rule
    match-value 
    msg-type            request
    new-value methods   INVITE

    name                generateVSA200
    header-name         P-Acme-VSA
    action              add
    comparison-type     boolean
    match-value         &lt;span class=&quot;nv&quot;&gt;$storeDiversion&lt;/span&gt;
    msg-type            any
    new-value           200:+&lt;span class=&quot;nv&quot;&gt;$storeDiversion&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;
    new-value methods   INVITE

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
In this example a Nortel CS2K sends &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;audio&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; and &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;image&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a single SIP Invite which breaks Cisco ISR Faxing.
An HMR is required to &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;SDP&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;audio and &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;image to &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;0&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; only when both are present. HMR cannot take
effect when only one is present otherwise the FAX will fail.

sip-manipulation
        name                           setSdp
        description                    
        split-headers                  
        join-headers                  
        header-rule
                name                           setSdpZero
                header-name                    content-type
                action                         manipulate
                comparison-type                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-sensitive&lt;/span&gt;
                msg-type                       request
                methods                        INVITE
                match-value                    
                new-value                      
                element-rule
                        name                           setSdpZeroRule
                        parameter-name                 application/sdp
                        &lt;span class=&quot;nb&quot;&gt;type                           &lt;/span&gt;mime
                        action                         find-replace-all
                        match-val-type                 any
                        comparison-type                pattern-rule
                        match-value                    &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;audio&lt;span class=&quot;se&quot;&gt;\,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;image&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;0-9]&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1,5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;.udptl[[:1:]]
                        new-value                      0
                        


INVITE sip:8088881491@voip.hawaiiantel.net:5060 SIP/2.0
Via: SIP/2.0/UDP 172.20.20.1:5060&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;z9hG4bKuucm4i10cg21fh8id4b0.1
Record-Route: &amp;lt;sip:8088881491@172.20.20.1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;lr&amp;gt;
From: &amp;lt;sip:8085463052@172.20.20.1:5060&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;phone&amp;gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1688407842-1296205260165-
To: &lt;span class=&quot;s2&quot;&gt;&quot;A5_Lab Fax&quot;&lt;/span&gt; &amp;lt;sip:8088881491@172.20.20.1:5060&amp;gt;
Call-ID: BW230100165270111358024115@113.52.63.7
CSeq: 636310211 INVITE
Contact: &amp;lt;sip:8085463052@172.20.20.1:5060&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;udp&amp;gt;
Supported: 100rel
Max-forwards: 69
Allow: ACK, BYE, CANCEL, INFO, INVITE, OPTIONS, PRACK, REFER, NOTIFY, UPDATE
Content-Type: application/sdp
Accept: multipart/mixed, application/media_control+xml, application/sdp
Content-Length:   257
 
&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BroadWorks 644472 1 IN IP4 172.20.20.1
&lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-
&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;IN IP4 172.20.20.1
&lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 0
&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;audio 16480 RTP/AVP 0 8 18 101
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ptime:20
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fmtp:18 &lt;span class=&quot;nv&quot;&gt;annexb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rtpmap:101 telephone-event/8000
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fmtp:101 0-15
&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;image 16484 udptl t38
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;T38FaxUdpEC:t38UDPRedundancy
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 

</feed>